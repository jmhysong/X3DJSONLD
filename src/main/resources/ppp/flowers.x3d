<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "http://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" profile="Immersive" version="3.3" xsd:noNamespaceSchemaLocation="http://www.web3d.org/specifications/x3d-3.3.xsd"><head><meta name="title" content="flowers.x3d"></meta>
<meta name="creator" content="John Carlson"></meta>
<meta name="description" content="5 or more prismatic flowers"></meta>
<meta name="generator" content="X3D-Edit, https://savage.nps.edu/X3D-Edit"></meta>
<meta name="identifier" content="http://coderextreme.net/X3DJSONLD/flowers.x3d"></meta>
<meta name="translated" content="02 May 2017"></meta>
<meta name="generator" content="X3dToJson.xslt, http://www.web3d.org/x3d/stylesheets/X3dToJson.html"></meta>
<meta name="reference" content="X3D JSON encoding: http://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"></meta>
<meta name="translated" content="2 May 2017"></meta>
<meta name="generator" content="X3DJSONLD: https://github.com/coderextreme/X3DJSONLD"></meta>
</head>
<Scene><NavigationInfo></NavigationInfo>
<Background backUrl="&quot;images/all_probes/stpeters_cross/stpeters_back.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_back.png&quot;" bottomUrl="&quot;images/all_probes/stpeters_cross/stpeters_bottom.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_bottom.png&quot;" frontUrl="&quot;images/all_probes/stpeters_cross/stpeters_front.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_front.png&quot;" leftUrl="&quot;images/all_probes/stpeters_cross/stpeters_left.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_left.png&quot;" rightUrl="&quot;images/all_probes/stpeters_cross/stpeters_right.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_right.png&quot;" topUrl="&quot;images/all_probes/stpeters_cross/stpeters_top.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_top.png&quot;"></Background>
<Transform><Transform DEF="DECLflower_INSTANCE_transform"><Shape><Appearance containerField="appearance"><Material containerField="material" diffuseColor="0.7 0.7 0.7" specularColor="0.5 0.5 0.5"></Material>
<ComposedCubeMapTexture containerField="texture" DEF="DECLflower_INSTANCE_texture"><ImageTexture containerField="back" url="&quot;images/all_probes/stpeters_cross/stpeters_back.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_back.png&quot;"></ImageTexture>
<ImageTexture containerField="bottom" url="&quot;images/all_probes/stpeters_cross/stpeters_bottom.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_bottom.png&quot;"></ImageTexture>
<ImageTexture containerField="front" url="&quot;images/all_probes/stpeters_cross/stpeters_front.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_front.png&quot;"></ImageTexture>
<ImageTexture containerField="left" url="&quot;images/all_probes/stpeters_cross/stpeters_left.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_left.png&quot;"></ImageTexture>
<ImageTexture containerField="right" url="&quot;images/all_probes/stpeters_cross/stpeters_right.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_right.png&quot;"></ImageTexture>
<ImageTexture containerField="top" url="&quot;images/all_probes/stpeters_cross/stpeters_top.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_top.png&quot;"></ImageTexture>
</ComposedCubeMapTexture>
<ComposedShader DEF="DECLflower_INSTANCE_shader" language="GLSL"><field name="xxxcube" type="SFInt32" accessType="inputOutput" value="0"></field>
<field name="cube" type="SFNode" accessType="inputOutput"><ComposedCubeMapTexture USE="DECLflower_INSTANCE_texture"></ComposedCubeMapTexture>
</field>
<field name="chromaticDispertion" type="SFVec3f" accessType="inputOutput" value="0.98 1 1.033"></field>
<field name="bias" type="SFFloat" accessType="inputOutput" value="10"></field>
<field name="scale" type="SFFloat" accessType="inputOutput" value="10"></field>
<field name="power" type="SFFloat" accessType="inputOutput" value="2"></field>
<ShaderPart url="&quot;cobweb.vs&quot; &quot;http://coderextreme.net/X3DJSONLD/cobweb.vs&quot;" type="VERTEX"></ShaderPart>
<ShaderPart url="&quot;pc_bubbles.fs&quot; &quot;http://coderextreme.net/X3DJSONLD/pc_bubbles.fs&quot;" type="FRAGMENT"></ShaderPart>
</ComposedShader>
</Appearance>
<IndexedFaceSet containerField="geometry" DEF="DECLflower_INSTANCE_Orbit"><Coordinate containerField="coord" DEF="DECLflower_INSTANCE_OrbitCoordinates"></Coordinate>
</IndexedFaceSet>
</Shape>
</Transform>
<Script DEF="DECLflower_INSTANCE_Bounce"><field name="translation" accessType="inputOutput" type="SFVec3f" value="0 0 0"></field>
<field name="velocity" accessType="inputOutput" type="SFVec3f" value="0 0 0"></field>
<field name="set_fraction" accessType="inputOnly" type="SFTime"></field>
<field name="coordinates" accessType="inputOutput" type="MFVec3f"></field>
<field name="coordIndexes" accessType="inputOutput" type="MFInt32"></field>
<field name="a" type="SFFloat" accessType="inputOutput" value="0.5"></field>
<field name="b" type="SFFloat" accessType="inputOutput" value="0.5"></field>
<field name="c" type="SFFloat" accessType="inputOutput" value="3"></field>
<field name="d" type="SFFloat" accessType="inputOutput" value="3"></field>
<field name="tdelta" type="SFFloat" accessType="inputOutput" value="0.5"></field>
<field name="pdelta" type="SFFloat" accessType="inputOutput" value="0.5"></field>
<![CDATA[ecmascript:
			function set_translation(value) {
				translation = value;
			}
			function translation_changed() {
				return translation;
			}
			function initialize() {
			    translation = new SFVec3f(0, 0, 0);
			    velocity = new SFVec3f(
			    	Math.random() - 0.5,
				Math.random() - 0.5,
				Math.random() - 0.5);
			}
			function set_fraction() {
			    translation = new SFVec3f(
			    	translation[0] + velocity[0],
				translation[1] + velocity[1],
				translation[2] + velocity[2]);
			    for (var j = 0; j <= 2; j++) {
				    if (Math.abs(translation[j]) > 10) {
					initialize();
				    } else {
					velocity[0] += Math.random() * 0.2 - 0.1;
					velocity[1] += Math.random() * 0.2 - 0.1;
					velocity[2] += Math.random() * 0.2 - 0.1;
				    }
			    }
			    animate_flowers();
			}

			function initialize() {
			     resolution = 100;
			     updateCoordinates(resolution);
			     if (typeof coordIndexes == 'undefined' || coordIndexes == null) {
				coordIndexes = new MFInt32();
			     }
			     ci = 0;
			     for ( i = 0; i < resolution-1; i++) {
				for ( j = 0; j < resolution-1; j++) {
				     coordIndexes[ci] = i*resolution+j;
				     coordIndexes[ci+1] = i*resolution+j+1;
				     coordIndexes[ci+2] = (i+1)*resolution+j+1;
				     coordIndexes[ci+3] = (i+1)*resolution+j;
				     coordIndexes[ci+4] = -1;
				     ci += 5;
				}
			    }
			}

			function updateCoordinates(resolution) {
			     theta = 0.0;
			     phi = 0.0;
			     delta = (2 * 3.141592653) / (resolution-1);
			     if (typeof coordinates == 'undefined' || coordinates == null) {
				coordinates = new MFVec3f();
			     }
			     for ( i = 0; i < resolution; i++) {
				for ( j = 0; j < resolution; j++) {
					rho = a + b * Math.cos(c * theta) * Math.cos(d * phi);
					coordinates[i*resolution+j] = new SFVec3f();
					coordinates[i*resolution+j][0] = rho * Math.cos(phi) * Math.cos(theta);
					coordinates[i*resolution+j][1] = rho * Math.cos(phi) * Math.sin(theta);
					coordinates[i*resolution+j][2] = rho * Math.sin(phi);
					theta += delta;
				}
				phi += delta;
			     }
			}

			function animate_flowers(fraction, eventTime) {
				choice = Math.floor(Math.random() * 4);
				switch (choice) {
				case 0:
					a += Math.random() * 0.2 - 0.1;
					break;
				case 1:
					b += Math.random() * 0.2 - 0.1;
					break;
				case 2:
					c += Math.random() * 2 - 1;
					break;
				case 3:
					d += Math.random() * 2 - 1;
					break;
				}
				if (a > 1) {
					a =  0.5;
				}
				if (b > 1) {
					b =  0.5;
				}
				if (c < 1) {
					c =  4;
				}
				if (d < 1) {
					d =  4;
				}
				if (c > 10) {
					c = 4;
				}
				if (d > 10) {
					d = 4;
				}
				resolution = 100;
				updateCoordinates(resolution);
			}
]]></Script>
<TimeSensor DEF="DECLflower_INSTANCE_TourTime" cycleInterval="0.15" loop="true"></TimeSensor>
<ROUTE fromNode="DECLflower_INSTANCE_TourTime" fromField="cycleTime" toNode="DECLflower_INSTANCE_Bounce" toField="set_fraction"></ROUTE>
<ROUTE fromNode="DECLflower_INSTANCE_Bounce" fromField="translation_changed" toNode="DECLflower_INSTANCE_transform" toField="set_translation"></ROUTE>
<ROUTE fromNode="DECLflower_INSTANCE_Bounce" fromField="coordIndexes" toNode="DECLflower_INSTANCE_Orbit" toField="set_coordIndex"></ROUTE>
<ROUTE fromNode="DECLflower_INSTANCE_Bounce" fromField="coordinates" toNode="DECLflower_INSTANCE_OrbitCoordinates" toField="set_point"></ROUTE>
<Transform DEF="DECLflower_INSTANCE1000_transform"><Shape><Appearance containerField="appearance"><Material containerField="material" diffuseColor="0.7 0.7 0.7" specularColor="0.5 0.5 0.5"></Material>
<ComposedCubeMapTexture containerField="texture" DEF="DECLflower_INSTANCE1000_texture"><ImageTexture containerField="back" url="&quot;images/all_probes/stpeters_cross/stpeters_back.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_back.png&quot;"></ImageTexture>
<ImageTexture containerField="bottom" url="&quot;images/all_probes/stpeters_cross/stpeters_bottom.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_bottom.png&quot;"></ImageTexture>
<ImageTexture containerField="front" url="&quot;images/all_probes/stpeters_cross/stpeters_front.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_front.png&quot;"></ImageTexture>
<ImageTexture containerField="left" url="&quot;images/all_probes/stpeters_cross/stpeters_left.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_left.png&quot;"></ImageTexture>
<ImageTexture containerField="right" url="&quot;images/all_probes/stpeters_cross/stpeters_right.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_right.png&quot;"></ImageTexture>
<ImageTexture containerField="top" url="&quot;images/all_probes/stpeters_cross/stpeters_top.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_top.png&quot;"></ImageTexture>
</ComposedCubeMapTexture>
<ComposedShader DEF="DECLflower_INSTANCE1000_shader" language="GLSL"><field name="xxxcube" type="SFInt32" accessType="inputOutput" value="0"></field>
<field name="cube" type="SFNode" accessType="inputOutput"><ComposedCubeMapTexture USE="DECLflower_INSTANCE1000_texture"></ComposedCubeMapTexture>
</field>
<field name="chromaticDispertion" type="SFVec3f" accessType="inputOutput" value="0.98 1 1.033"></field>
<field name="bias" type="SFFloat" accessType="inputOutput" value="10"></field>
<field name="scale" type="SFFloat" accessType="inputOutput" value="10"></field>
<field name="power" type="SFFloat" accessType="inputOutput" value="2"></field>
<ShaderPart url="&quot;cobweb.vs&quot; &quot;http://coderextreme.net/X3DJSONLD/cobweb.vs&quot;" type="VERTEX"></ShaderPart>
<ShaderPart url="&quot;pc_bubbles.fs&quot; &quot;http://coderextreme.net/X3DJSONLD/pc_bubbles.fs&quot;" type="FRAGMENT"></ShaderPart>
</ComposedShader>
</Appearance>
<IndexedFaceSet containerField="geometry" DEF="DECLflower_INSTANCE1000_Orbit"><Coordinate containerField="coord" DEF="DECLflower_INSTANCE1000_OrbitCoordinates"></Coordinate>
</IndexedFaceSet>
</Shape>
</Transform>
<Script DEF="DECLflower_INSTANCE1000_Bounce"><field name="translation" accessType="inputOutput" type="SFVec3f" value="0 0 0"></field>
<field name="velocity" accessType="inputOutput" type="SFVec3f" value="0 0 0"></field>
<field name="set_fraction" accessType="inputOnly" type="SFTime"></field>
<field name="coordinates" accessType="inputOutput" type="MFVec3f"></field>
<field name="coordIndexes" accessType="inputOutput" type="MFInt32"></field>
<field name="a" type="SFFloat" accessType="inputOutput" value="0.5"></field>
<field name="b" type="SFFloat" accessType="inputOutput" value="0.5"></field>
<field name="c" type="SFFloat" accessType="inputOutput" value="3"></field>
<field name="d" type="SFFloat" accessType="inputOutput" value="3"></field>
<field name="tdelta" type="SFFloat" accessType="inputOutput" value="0.5"></field>
<field name="pdelta" type="SFFloat" accessType="inputOutput" value="0.5"></field>
<![CDATA[ecmascript:
			function set_translation(value) {
				translation = value;
			}
			function translation_changed() {
				return translation;
			}
			function initialize() {
			    translation = new SFVec3f(0, 0, 0);
			    velocity = new SFVec3f(
			    	Math.random() - 0.5,
				Math.random() - 0.5,
				Math.random() - 0.5);
			}
			function set_fraction() {
			    translation = new SFVec3f(
			    	translation[0] + velocity[0],
				translation[1] + velocity[1],
				translation[2] + velocity[2]);
			    for (var j = 0; j <= 2; j++) {
				    if (Math.abs(translation[j]) > 10) {
					initialize();
				    } else {
					velocity[0] += Math.random() * 0.2 - 0.1;
					velocity[1] += Math.random() * 0.2 - 0.1;
					velocity[2] += Math.random() * 0.2 - 0.1;
				    }
			    }
			    animate_flowers();
			}

			function initialize() {
			     resolution = 100;
			     updateCoordinates(resolution);
			     if (typeof coordIndexes == 'undefined' || coordIndexes == null) {
				coordIndexes = new MFInt32();
			     }
			     ci = 0;
			     for ( i = 0; i < resolution-1; i++) {
				for ( j = 0; j < resolution-1; j++) {
				     coordIndexes[ci] = i*resolution+j;
				     coordIndexes[ci+1] = i*resolution+j+1;
				     coordIndexes[ci+2] = (i+1)*resolution+j+1;
				     coordIndexes[ci+3] = (i+1)*resolution+j;
				     coordIndexes[ci+4] = -1;
				     ci += 5;
				}
			    }
			}

			function updateCoordinates(resolution) {
			     theta = 0.0;
			     phi = 0.0;
			     delta = (2 * 3.141592653) / (resolution-1);
			     if (typeof coordinates == 'undefined' || coordinates == null) {
				coordinates = new MFVec3f();
			     }
			     for ( i = 0; i < resolution; i++) {
				for ( j = 0; j < resolution; j++) {
					rho = a + b * Math.cos(c * theta) * Math.cos(d * phi);
					coordinates[i*resolution+j] = new SFVec3f();
					coordinates[i*resolution+j][0] = rho * Math.cos(phi) * Math.cos(theta);
					coordinates[i*resolution+j][1] = rho * Math.cos(phi) * Math.sin(theta);
					coordinates[i*resolution+j][2] = rho * Math.sin(phi);
					theta += delta;
				}
				phi += delta;
			     }
			}

			function animate_flowers(fraction, eventTime) {
				choice = Math.floor(Math.random() * 4);
				switch (choice) {
				case 0:
					a += Math.random() * 0.2 - 0.1;
					break;
				case 1:
					b += Math.random() * 0.2 - 0.1;
					break;
				case 2:
					c += Math.random() * 2 - 1;
					break;
				case 3:
					d += Math.random() * 2 - 1;
					break;
				}
				if (a > 1) {
					a =  0.5;
				}
				if (b > 1) {
					b =  0.5;
				}
				if (c < 1) {
					c =  4;
				}
				if (d < 1) {
					d =  4;
				}
				if (c > 10) {
					c = 4;
				}
				if (d > 10) {
					d = 4;
				}
				resolution = 100;
				updateCoordinates(resolution);
			}
]]></Script>
<TimeSensor DEF="DECLflower_INSTANCE1000_TourTime" cycleInterval="0.15" loop="true"></TimeSensor>
<ROUTE fromNode="DECLflower_INSTANCE1000_TourTime" fromField="cycleTime" toNode="DECLflower_INSTANCE1000_Bounce" toField="set_fraction"></ROUTE>
<ROUTE fromNode="DECLflower_INSTANCE1000_Bounce" fromField="translation_changed" toNode="DECLflower_INSTANCE1000_transform" toField="set_translation"></ROUTE>
<ROUTE fromNode="DECLflower_INSTANCE1000_Bounce" fromField="coordIndexes" toNode="DECLflower_INSTANCE1000_Orbit" toField="set_coordIndex"></ROUTE>
<ROUTE fromNode="DECLflower_INSTANCE1000_Bounce" fromField="coordinates" toNode="DECLflower_INSTANCE1000_OrbitCoordinates" toField="set_point"></ROUTE>
<Transform DEF="DECLflower_INSTANCE2000_transform"><Shape><Appearance containerField="appearance"><Material containerField="material" diffuseColor="0.7 0.7 0.7" specularColor="0.5 0.5 0.5"></Material>
<ComposedCubeMapTexture containerField="texture" DEF="DECLflower_INSTANCE2000_texture"><ImageTexture containerField="back" url="&quot;images/all_probes/stpeters_cross/stpeters_back.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_back.png&quot;"></ImageTexture>
<ImageTexture containerField="bottom" url="&quot;images/all_probes/stpeters_cross/stpeters_bottom.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_bottom.png&quot;"></ImageTexture>
<ImageTexture containerField="front" url="&quot;images/all_probes/stpeters_cross/stpeters_front.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_front.png&quot;"></ImageTexture>
<ImageTexture containerField="left" url="&quot;images/all_probes/stpeters_cross/stpeters_left.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_left.png&quot;"></ImageTexture>
<ImageTexture containerField="right" url="&quot;images/all_probes/stpeters_cross/stpeters_right.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_right.png&quot;"></ImageTexture>
<ImageTexture containerField="top" url="&quot;images/all_probes/stpeters_cross/stpeters_top.png&quot; &quot;http://coderextreme.net/X3DJSONLD/images/all_probes/stpeters_cross/stpeters_top.png&quot;"></ImageTexture>
</ComposedCubeMapTexture>
<ComposedShader DEF="DECLflower_INSTANCE2000_shader" language="GLSL"><field name="xxxcube" type="SFInt32" accessType="inputOutput" value="0"></field>
<field name="cube" type="SFNode" accessType="inputOutput"><ComposedCubeMapTexture USE="DECLflower_INSTANCE2000_texture"></ComposedCubeMapTexture>
</field>
<field name="chromaticDispertion" type="SFVec3f" accessType="inputOutput" value="0.98 1 1.033"></field>
<field name="bias" type="SFFloat" accessType="inputOutput" value="10"></field>
<field name="scale" type="SFFloat" accessType="inputOutput" value="10"></field>
<field name="power" type="SFFloat" accessType="inputOutput" value="2"></field>
<ShaderPart url="&quot;cobweb.vs&quot; &quot;http://coderextreme.net/X3DJSONLD/cobweb.vs&quot;" type="VERTEX"></ShaderPart>
<ShaderPart url="&quot;pc_bubbles.fs&quot; &quot;http://coderextreme.net/X3DJSONLD/pc_bubbles.fs&quot;" type="FRAGMENT"></ShaderPart>
</ComposedShader>
</Appearance>
<IndexedFaceSet containerField="geometry" DEF="DECLflower_INSTANCE2000_Orbit"><Coordinate containerField="coord" DEF="DECLflower_INSTANCE2000_OrbitCoordinates"></Coordinate>
</IndexedFaceSet>
</Shape>
</Transform>
<Script DEF="DECLflower_INSTANCE2000_Bounce"><field name="translation" accessType="inputOutput" type="SFVec3f" value="0 0 0"></field>
<field name="velocity" accessType="inputOutput" type="SFVec3f" value="0 0 0"></field>
<field name="set_fraction" accessType="inputOnly" type="SFTime"></field>
<field name="coordinates" accessType="inputOutput" type="MFVec3f"></field>
<field name="coordIndexes" accessType="inputOutput" type="MFInt32"></field>
<field name="a" type="SFFloat" accessType="inputOutput" value="0.5"></field>
<field name="b" type="SFFloat" accessType="inputOutput" value="0.5"></field>
<field name="c" type="SFFloat" accessType="inputOutput" value="3"></field>
<field name="d" type="SFFloat" accessType="inputOutput" value="3"></field>
<field name="tdelta" type="SFFloat" accessType="inputOutput" value="0.5"></field>
<field name="pdelta" type="SFFloat" accessType="inputOutput" value="0.5"></field>
<![CDATA[ecmascript:
			function set_translation(value) {
				translation = value;
			}
			function translation_changed() {
				return translation;
			}
			function initialize() {
			    translation = new SFVec3f(0, 0, 0);
			    velocity = new SFVec3f(
			    	Math.random() - 0.5,
				Math.random() - 0.5,
				Math.random() - 0.5);
			}
			function set_fraction() {
			    translation = new SFVec3f(
			    	translation[0] + velocity[0],
				translation[1] + velocity[1],
				translation[2] + velocity[2]);
			    for (var j = 0; j <= 2; j++) {
				    if (Math.abs(translation[j]) > 10) {
					initialize();
				    } else {
					velocity[0] += Math.random() * 0.2 - 0.1;
					velocity[1] += Math.random() * 0.2 - 0.1;
					velocity[2] += Math.random() * 0.2 - 0.1;
				    }
			    }
			    animate_flowers();
			}

			function initialize() {
			     resolution = 100;
			     updateCoordinates(resolution);
			     if (typeof coordIndexes == 'undefined' || coordIndexes == null) {
				coordIndexes = new MFInt32();
			     }
			     ci = 0;
			     for ( i = 0; i < resolution-1; i++) {
				for ( j = 0; j < resolution-1; j++) {
				     coordIndexes[ci] = i*resolution+j;
				     coordIndexes[ci+1] = i*resolution+j+1;
				     coordIndexes[ci+2] = (i+1)*resolution+j+1;
				     coordIndexes[ci+3] = (i+1)*resolution+j;
				     coordIndexes[ci+4] = -1;
				     ci += 5;
				}
			    }
			}

			function updateCoordinates(resolution) {
			     theta = 0.0;
			     phi = 0.0;
			     delta = (2 * 3.141592653) / (resolution-1);
			     if (typeof coordinates == 'undefined' || coordinates == null) {
				coordinates = new MFVec3f();
			     }
			     for ( i = 0; i < resolution; i++) {
				for ( j = 0; j < resolution; j++) {
					rho = a + b * Math.cos(c * theta) * Math.cos(d * phi);
					coordinates[i*resolution+j] = new SFVec3f();
					coordinates[i*resolution+j][0] = rho * Math.cos(phi) * Math.cos(theta);
					coordinates[i*resolution+j][1] = rho * Math.cos(phi) * Math.sin(theta);
					coordinates[i*resolution+j][2] = rho * Math.sin(phi);
					theta += delta;
				}
				phi += delta;
			     }
			}

			function animate_flowers(fraction, eventTime) {
				choice = Math.floor(Math.random() * 4);
				switch (choice) {
				case 0:
					a += Math.random() * 0.2 - 0.1;
					break;
				case 1:
					b += Math.random() * 0.2 - 0.1;
					break;
				case 2:
					c += Math.random() * 2 - 1;
					break;
				case 3:
					d += Math.random() * 2 - 1;
					break;
				}
				if (a > 1) {
					a =  0.5;
				}
				if (b > 1) {
					b =  0.5;
				}
				if (c < 1) {
					c =  4;
				}
				if (d < 1) {
					d =  4;
				}
				if (c > 10) {
					c = 4;
				}
				if (d > 10) {
					d = 4;
				}
				resolution = 100;
				updateCoordinates(resolution);
			}
]]></Script>
<TimeSensor DEF="DECLflower_INSTANCE2000_TourTime" cycleInterval="0.15" loop="true"></TimeSensor>
<ROUTE fromNode="DECLflower_INSTANCE2000_TourTime" fromField="cycleTime" toNode="DECLflower_INSTANCE2000_Bounce" toField="set_fraction"></ROUTE>
<ROUTE fromNode="DECLflower_INSTANCE2000_Bounce" fromField="translation_changed" toNode="DECLflower_INSTANCE2000_transform" toField="set_translation"></ROUTE>
<ROUTE fromNode="DECLflower_INSTANCE2000_Bounce" fromField="coordIndexes" toNode="DECLflower_INSTANCE2000_Orbit" toField="set_coordIndex"></ROUTE>
<ROUTE fromNode="DECLflower_INSTANCE2000_Bounce" fromField="coordinates" toNode="DECLflower_INSTANCE2000_OrbitCoordinates" toField="set_point"></ROUTE>
</Transform>
</Scene>
</X3D>