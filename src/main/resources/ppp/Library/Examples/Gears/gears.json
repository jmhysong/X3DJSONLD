{
  "X3D": {
    "encoding": "UTF-8",
    "@profile": "Full",
    "@version": "3.0",
    "@xsd:noNamespaceSchemaLocation": "http://www.web3d.org/specifications/x3d-3.0.xsd",
    "JSON schema": "http://www.web3d.org/specifications/x3d-3.3-JSONSchema.json",
    "head": {
      "meta": [
        {
          "@name": "comment",
          "@content": "World of Titania"
        },
        {
          "@name": "created",
          "@content": "Mon, 14 Sep 2015 21:00:05 GMT"
        },
        {
          "@name": "creator",
          "@content": "Holger Seelig"
        },
        {
          "@name": "generator",
          "@content": "Titania V1.1.0, http://titania.create3000.de"
        },
        {
          "@name": "icon",
          "@content": "../../ui/icons/icon-bw.svg"
        },
        {
          "@name": "modified",
          "@content": "Mon, 14 Sep 2015 21:00:05 GMT"
        },
        {
          "@name": "title",
          "@content": "about:gears"
        },
        {
          "@name": "translated",
          "@content": "30 April 2017"
        },
        {
          "@name": "generator",
          "@content": "X3dToJson.xslt, http://www.web3d.org/x3d/stylesheets/X3dToJson.html"
        },
        {
          "@name": "reference",
          "@content": "X3D JSON encoding: http://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
        }
      ]
    },
    "Scene": {
      "-children": [
        {},
        {},
        {
          "Viewpoint": {
            "@description": "Home",
            "@position": [
              0,
              0,
              20
            ]
          }
        },
        {
          "TimeSensor": {
            "@DEF": "DECLRotor_RedRotor_Timer",
            "@enabled": true,
            "@cycleInterval": 10,
            "@loop": true
          }
        },
        {
          "OrientationInterpolator": {
            "@DEF": "DECLRotor_RedRotor_Interpolator",
            "@key": [
              0,
              0.25,
              0.5,
              0.75,
              1
            ],
            "@keyValue": [
              0,
              0,
              1,
              0,
              0,
              0,
              1,
              1.5708,
              0,
              0,
              1,
              3.14159,
              0,
              0,
              1,
              4.71239,
              0,
              0,
              1,
              0
            ]
          }
        },
        {
          "Script": {
            "@DEF": "DECLRotor_RedRotor_Rotor",
            "field": [
              {
                "@name": "set_axis",
                "@accessType": "inputOnly",
                "@type": "SFVec3f"
              },
              {
                "@name": "set_angle",
                "@accessType": "inputOnly",
                "@type": "SFFloat"
              },
              {
                "@name": "axis",
                "@accessType": "inputOutput",
                "@type": "SFVec3f",
                "@value": [
                  0,
                  0,
                  1
                ]
              },
              {
                "@name": "angle",
                "@accessType": "inputOutput",
                "@type": "SFFloat"
              },
              {
                "@name": "interpolator",
                "@accessType": "initializeOnly",
                "@type": "SFNode",
                "-children": [
                  {
                    "OrientationInterpolator": {
                      "@USE": "DECLRotor_RedRotor_Interpolator"
                    }
                  }
                ]
              }
            ],
            "#sourceText": [
              "vrmlscript:",
              "",
              "function initialize ()",
              "{",
              "\teventsProcessed ();",
              "}",
              "",
              "function set_axis ()",
              "{ }",
              "",
              "function set_angle ()",
              "{ }",
              "",
              "function eventsProcessed ()",
              "{",
              "\tvar keyValue = interpolator .keyValue;",
              "",
              "\tfor (var i = 0; i < 4; ++ i)",
              "\t\tkeyValue [i] = new SFRotation (axis, angle + 2 * Math .PI / 4 * i);",
              "\t",
              "\tkeyValue [4] = keyValue [0];",
              "}"
            ]
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLRotor_RedRotor_Timer",
            "@fromField": "fraction_changed",
            "@toNode": "DECLRotor_RedRotor_Interpolator",
            "@toField": "set_fraction"
          }
        },
        {
          "TimeSensor": {
            "@DEF": "DECLRotor_GreenRotor_Timer",
            "@enabled": true,
            "@cycleInterval": 5,
            "@loop": true
          }
        },
        {
          "OrientationInterpolator": {
            "@DEF": "DECLRotor_GreenRotor_Interpolator",
            "@key": [
              0,
              0.25,
              0.5,
              0.75,
              1
            ],
            "@keyValue": [
              0,
              0,
              1,
              0,
              0,
              0,
              1,
              1.5708,
              0,
              0,
              1,
              3.14159,
              0,
              0,
              1,
              4.71239,
              0,
              0,
              1,
              0
            ]
          }
        },
        {
          "Script": {
            "@DEF": "DECLRotor_GreenRotor_Rotor",
            "field": [
              {
                "@name": "set_axis",
                "@accessType": "inputOnly",
                "@type": "SFVec3f"
              },
              {
                "@name": "set_angle",
                "@accessType": "inputOnly",
                "@type": "SFFloat"
              },
              {
                "@name": "axis",
                "@accessType": "inputOutput",
                "@type": "SFVec3f",
                "@value": [
                  0,
                  0,
                  1
                ]
              },
              {
                "@name": "angle",
                "@accessType": "inputOutput",
                "@type": "SFFloat"
              },
              {
                "@name": "interpolator",
                "@accessType": "initializeOnly",
                "@type": "SFNode",
                "-children": [
                  {
                    "OrientationInterpolator": {
                      "@USE": "DECLRotor_GreenRotor_Interpolator"
                    }
                  }
                ]
              }
            ],
            "#sourceText": [
              "vrmlscript:",
              "",
              "function initialize ()",
              "{",
              "\teventsProcessed ();",
              "}",
              "",
              "function set_axis ()",
              "{ }",
              "",
              "function set_angle ()",
              "{ }",
              "",
              "function eventsProcessed ()",
              "{",
              "\tvar keyValue = interpolator .keyValue;",
              "",
              "\tfor (var i = 0; i < 4; ++ i)",
              "\t\tkeyValue [i] = new SFRotation (axis, angle + 2 * Math .PI / 4 * i);",
              "\t",
              "\tkeyValue [4] = keyValue [0];",
              "}"
            ]
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLRotor_GreenRotor_Timer",
            "@fromField": "fraction_changed",
            "@toNode": "DECLRotor_GreenRotor_Interpolator",
            "@toField": "set_fraction"
          }
        },
        {
          "TimeSensor": {
            "@DEF": "DECLRotor_BlueRotor_Timer",
            "@enabled": true,
            "@cycleInterval": 5,
            "@loop": true
          }
        },
        {
          "OrientationInterpolator": {
            "@DEF": "DECLRotor_BlueRotor_Interpolator",
            "@key": [
              0,
              0.25,
              0.5,
              0.75,
              1
            ],
            "@keyValue": [
              0,
              0,
              1,
              0,
              0,
              0,
              1,
              1.5708,
              0,
              0,
              1,
              3.14159,
              0,
              0,
              1,
              4.71239,
              0,
              0,
              1,
              0
            ]
          }
        },
        {
          "Script": {
            "@DEF": "DECLRotor_BlueRotor_Rotor",
            "field": [
              {
                "@name": "set_axis",
                "@accessType": "inputOnly",
                "@type": "SFVec3f"
              },
              {
                "@name": "set_angle",
                "@accessType": "inputOnly",
                "@type": "SFFloat"
              },
              {
                "@name": "axis",
                "@accessType": "inputOutput",
                "@type": "SFVec3f",
                "@value": [
                  0,
                  0,
                  1
                ]
              },
              {
                "@name": "angle",
                "@accessType": "inputOutput",
                "@type": "SFFloat"
              },
              {
                "@name": "interpolator",
                "@accessType": "initializeOnly",
                "@type": "SFNode",
                "-children": [
                  {
                    "OrientationInterpolator": {
                      "@USE": "DECLRotor_BlueRotor_Interpolator"
                    }
                  }
                ]
              }
            ],
            "#sourceText": [
              "vrmlscript:",
              "",
              "function initialize ()",
              "{",
              "\teventsProcessed ();",
              "}",
              "",
              "function set_axis ()",
              "{ }",
              "",
              "function set_angle ()",
              "{ }",
              "",
              "function eventsProcessed ()",
              "{",
              "\tvar keyValue = interpolator .keyValue;",
              "",
              "\tfor (var i = 0; i < 4; ++ i)",
              "\t\tkeyValue [i] = new SFRotation (axis, angle + 2 * Math .PI / 4 * i);",
              "\t",
              "\tkeyValue [4] = keyValue [0];",
              "}"
            ]
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLRotor_BlueRotor_Timer",
            "@fromField": "fraction_changed",
            "@toNode": "DECLRotor_BlueRotor_Interpolator",
            "@toField": "set_fraction"
          }
        },
        {
          "Transform": {
            "@DEF": "RedGear_1",
            "@translation": [
              -2.59808,
              -2.39242,
              0.725499
            ],
            "@rotation": [
              0.543846,
              0.826436,
              0.145723,
              0.627057
            ],
            "-children": [
              {
                "Transform": {
                  "@DEF": "Gear_1",
                  "-children": [
                    {
                      "Shape": {
                        "-appearance": {
                          "Appearance": {
                            "-material": {
                              "Material": {
                                "@diffuseColor": [
                                  0.8,
                                  0.1,
                                  0
                                ]
                              }
                            }
                          }
                        },
                        "-geometry": {
                          "IndexedFaceSet": {
                            "@DEF": "DECLGear_INSTANCE_Gear",
                            "-coord": {
                              "Coordinate": {}
                            },
                            "@creaseAngle": 0.6
                          }
                        }
                      }
                    },
                    {
                      "Switch": {
                        "@whichChoice": -1,
                        "-children": [
                          {
                            "Group": {
                              "-children": [
                                {
                                  "Script": {
                                    "@directOutput": true,
                                    "field": [
                                      {
                                        "@name": "teeth",
                                        "@accessType": "inputOutput",
                                        "@type": "SFFloat",
                                        "@value": 20
                                      },
                                      {
                                        "@name": "toothDepth",
                                        "@accessType": "inputOutput",
                                        "@type": "SFFloat",
                                        "@value": 0.7
                                      },
                                      {
                                        "@name": "innerRadius",
                                        "@accessType": "inputOutput",
                                        "@type": "SFFloat",
                                        "@value": 1
                                      },
                                      {
                                        "@name": "outerRadius",
                                        "@accessType": "inputOutput",
                                        "@type": "SFFloat",
                                        "@value": 4
                                      },
                                      {
                                        "@name": "width",
                                        "@accessType": "inputOutput",
                                        "@type": "SFFloat",
                                        "@value": 1
                                      },
                                      {
                                        "@name": "gear",
                                        "@accessType": "initializeOnly",
                                        "@type": "SFNode",
                                        "-children": [
                                          {
                                            "IndexedFaceSet": {
                                              "@USE": "DECLGear_INSTANCE_Gear"
                                            }
                                          }
                                        ]
                                      }
                                    ],
                                    "#sourceText": [
                                      "vrmlscript:",
                                      "",
                                      "function initialize ()",
                                      "{",
                                      "\teventsProcessed ();",
                                      "}",
                                      "",
                                      "function eventsProcessed ()",
                                      "{",
                                      "\tprint ('### Generating gear ...');",
                                      "",
                                      "\tvar indices = new MFInt32 ();",
                                      "\tvar points  = new MFVec3f ();",
                                      "",
                                      "\tvar cos = Math .cos;",
                                      "\tvar sin = Math .sin;",
                                      "",
                                      "\t// Radien and tooth angle",
                                      "",
                                      "\tvar radius0 = innerRadius;",
                                      "\tvar radius1 = outerRadius - toothDepth / 2;",
                                      "\tvar radius2 = outerRadius + toothDepth / 2;",
                                      "\tvar da = 2 * Math .PI / teeth / 4;",
                                      "",
                                      "\t// Front vectors",
                                      "",
                                      "\tvar vectorf0 = new SFVec3f (radius0, 0, width * 0.5);",
                                      "\tvar vectorf1 = new SFVec3f (radius1, 0, width * 0.5);",
                                      "\tvar vectorf2 = new SFVec3f (radius2, 0, width * 0.5);",
                                      "",
                                      "\t// Back vectors",
                                      "",
                                      "\tvar vectorb0 = new SFVec3f (radius0, 0, -width * 0.5);",
                                      "\tvar vectorb1 = new SFVec3f (radius1, 0, -width * 0.5);",
                                      "\tvar vectorb2 = new SFVec3f (radius2, 0, -width * 0.5);",
                                      "",
                                      "\t// Generate front face indices",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar index = i * 3;",
                                      "",
                                      "\t\tindices [indices .length] = index;",
                                      "\t\tindices [indices .length] = index + 1;",
                                      "\t\tindices [indices .length] = index + 2;",
                                      "\t\tindices [indices .length] = index + 4;",
                                      "\t\tindices [indices .length] = index + 3;",
                                      "\t\tindices [indices .length] = -1;",
                                      "\t}",
                                      "",
                                      "\t// Generate front face points",
                                      "",
                                      "\tfor (var i = 0; i < teeth + 1; ++ i)",
                                      "\t{",
                                      "\t\tvar angle = i * 2 * Math .PI / teeth;",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle)          .multVec (vectorf0);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle)          .multVec (vectorf1);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 3 * da) .multVec (vectorf1);",
                                      "\t}",
                                      "",
                                      "\tpoints .length = points .length - 1;",
                                      "",
                                      "\tpoints [points .length] = new SFVec3f ();",
                                      "\tpoints [points .length] = new SFVec3f ();",
                                      "\tpoints [points .length] = new SFVec3f ();",
                                      "",
                                      "",
                                      "\t// Generate front sides of teeth indices",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar index = i * 4;",
                                      "",
                                      "\t\tindices [indices .length] = points .length + index;",
                                      "\t\tindices [indices .length] = points .length + index + 1;",
                                      "\t\tindices [indices .length] = points .length + index + 2;",
                                      "\t\tindices [indices .length] = points .length + index + 3;",
                                      "\t\tindices [indices .length] = -1;",
                                      "\t}",
                                      "",
                                      "\t// Generate front sides of teeth points",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar angle = i * 2 * Math .PI / teeth;",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle)          .multVec (vectorf1);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + da)     .multVec (vectorf2);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 2 * da) .multVec (vectorf2);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 3 * da) .multVec (vectorf1);",
                                      "\t}",
                                      "",
                                      "",
                                      "\t// Generate back face indices",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar index = i * 3;",
                                      "",
                                      "\t\tindices [indices .length] = points .length + index;",
                                      "\t\tindices [indices .length] = points .length + index + 3;",
                                      "\t\tindices [indices .length] = points .length + index + 4;",
                                      "\t\tindices [indices .length] = points .length + index + 2;",
                                      "\t\tindices [indices .length] = points .length + index + 1;",
                                      "\t\tindices [indices .length] = -1;",
                                      "\t}",
                                      "",
                                      "\t// Generate back face points",
                                      "",
                                      "\tfor (var i = 0; i < teeth + 1; ++ i)",
                                      "\t{",
                                      "\t\tvar angle = i * 2 * Math .PI / teeth;",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle)          .multVec (vectorb0);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle)          .multVec (vectorb1);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 3 * da) .multVec (vectorb1);",
                                      "\t}",
                                      "",
                                      "\tpoints .length = points .length - 1;",
                                      "",
                                      "",
                                      "\t// Generate back sides of teeth indices",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar index = i * 4;",
                                      "",
                                      "\t\tindices [indices .length] = points .length + index;",
                                      "\t\tindices [indices .length] = points .length + index + 1;",
                                      "\t\tindices [indices .length] = points .length + index + 2;",
                                      "\t\tindices [indices .length] = points .length + index + 3;",
                                      "\t\tindices [indices .length] = -1;",
                                      "\t}",
                                      "",
                                      "\t// Generate front sides of teeth points",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar angle = i * 2 * Math .PI / teeth;",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 3 * da) .multVec (vectorb1);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 2 * da) .multVec (vectorb2);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + da)     .multVec (vectorb2);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle)          .multVec (vectorb1);",
                                      "\t}",
                                      "",
                                      "",
                                      "\t// Generate outward faces of teeth indices",
                                      "",
                                      "\tfor (var i = 0; i < teeth * 4; ++ i)",
                                      "\t{",
                                      "\t\tvar index = i * 2;",
                                      "",
                                      "\t\tindices [indices .length] = points .length + index;",
                                      "\t\tindices [indices .length] = points .length + index + 1;",
                                      "\t\tindices [indices .length] = points .length + index + 3;",
                                      "\t\tindices [indices .length] = points .length + index + 2;",
                                      "\t\tindices [indices .length] = -1;",
                                      "\t}",
                                      "",
                                      "\tindices [indices .length - 3] = points .length + 1;",
                                      "\tindices [indices .length - 2] = points .length;",
                                      "",
                                      "\t// Generate outward faces of teeth points",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t   var angle = i * 2 * Math .PI / teeth;",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle) .multVec (vectorf1);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle) .multVec (vectorb1);",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + da) .multVec (vectorf2);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + da) .multVec (vectorb2);",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 2 * da) .multVec (vectorf2);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 2 * da) .multVec (vectorb2);",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 3 * da) .multVec (vectorf1);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 3 * da) .multVec (vectorb1);",
                                      "\t}",
                                      "",
                                      "",
                                      "\t// Generate inside radius cylinder points",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar index = i * 2;",
                                      "",
                                      "\t\tindices [indices .length] = points .length + index;",
                                      "\t\tindices [indices .length] = points .length + index + 1;",
                                      "\t\tindices [indices .length] = points .length + index + 3;",
                                      "\t\tindices [indices .length] = points .length + index + 2;",
                                      "\t\tindices [indices .length] = -1;",
                                      "\t}",
                                      "",
                                      "\tindices [indices .length - 3] = points .length + 1;",
                                      "\tindices [indices .length - 2] = points .length;",
                                      "",
                                      "\t// Generate inside radius cylinder indices",
                                      "",
                                      "\tfor (var i = 0; i < teeth + 1; ++ i)",
                                      "\t{",
                                      "\t\tvar angle = i * 2 * Math .PI / teeth;",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle) .multVec (vectorb0);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle) .multVec (vectorf0);",
                                      "\t}",
                                      "",
                                      "\tprint ('### Generating gear done.');",
                                      "",
                                      "\tgear .coord .point   = points;",
                                      "\tgear .set_coordIndex = indices;",
                                      "}"
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "Transform": {
            "@DEF": "GreenGear_1",
            "@translation": [
              2.68468,
              -1.34925,
              -2.14056
            ],
            "@rotation": [
              0.111593,
              0.985198,
              0.130124,
              3.70575
            ],
            "-children": [
              {
                "Transform": {
                  "@DEF": "Gear_2",
                  "-children": [
                    {
                      "Shape": {
                        "-appearance": {
                          "Appearance": {
                            "-material": {
                              "Material": {
                                "@diffuseColor": [
                                  0,
                                  0.8,
                                  0.2
                                ]
                              }
                            }
                          }
                        },
                        "-geometry": {
                          "IndexedFaceSet": {
                            "@DEF": "DECLGear_INSTANCE1000_Gear",
                            "-coord": {
                              "Coordinate": {}
                            },
                            "@creaseAngle": 0.7
                          }
                        }
                      }
                    },
                    {
                      "Switch": {
                        "@whichChoice": -1,
                        "-children": [
                          {
                            "Group": {
                              "-children": [
                                {
                                  "Script": {
                                    "@directOutput": true,
                                    "field": [
                                      {
                                        "@name": "teeth",
                                        "@accessType": "inputOutput",
                                        "@type": "SFFloat",
                                        "@value": 10
                                      },
                                      {
                                        "@name": "toothDepth",
                                        "@accessType": "inputOutput",
                                        "@type": "SFFloat",
                                        "@value": 0.7
                                      },
                                      {
                                        "@name": "innerRadius",
                                        "@accessType": "inputOutput",
                                        "@type": "SFFloat",
                                        "@value": 0.5
                                      },
                                      {
                                        "@name": "outerRadius",
                                        "@accessType": "inputOutput",
                                        "@type": "SFFloat",
                                        "@value": 2
                                      },
                                      {
                                        "@name": "width",
                                        "@accessType": "inputOutput",
                                        "@type": "SFFloat",
                                        "@value": 2
                                      },
                                      {
                                        "@name": "gear",
                                        "@accessType": "initializeOnly",
                                        "@type": "SFNode",
                                        "-children": [
                                          {
                                            "IndexedFaceSet": {
                                              "@USE": "DECLGear_INSTANCE1000_Gear"
                                            }
                                          }
                                        ]
                                      }
                                    ],
                                    "#sourceText": [
                                      "vrmlscript:",
                                      "",
                                      "function initialize ()",
                                      "{",
                                      "\teventsProcessed ();",
                                      "}",
                                      "",
                                      "function eventsProcessed ()",
                                      "{",
                                      "\tprint ('### Generating gear ...');",
                                      "",
                                      "\tvar indices = new MFInt32 ();",
                                      "\tvar points  = new MFVec3f ();",
                                      "",
                                      "\tvar cos = Math .cos;",
                                      "\tvar sin = Math .sin;",
                                      "",
                                      "\t// Radien and tooth angle",
                                      "",
                                      "\tvar radius0 = innerRadius;",
                                      "\tvar radius1 = outerRadius - toothDepth / 2;",
                                      "\tvar radius2 = outerRadius + toothDepth / 2;",
                                      "\tvar da = 2 * Math .PI / teeth / 4;",
                                      "",
                                      "\t// Front vectors",
                                      "",
                                      "\tvar vectorf0 = new SFVec3f (radius0, 0, width * 0.5);",
                                      "\tvar vectorf1 = new SFVec3f (radius1, 0, width * 0.5);",
                                      "\tvar vectorf2 = new SFVec3f (radius2, 0, width * 0.5);",
                                      "",
                                      "\t// Back vectors",
                                      "",
                                      "\tvar vectorb0 = new SFVec3f (radius0, 0, -width * 0.5);",
                                      "\tvar vectorb1 = new SFVec3f (radius1, 0, -width * 0.5);",
                                      "\tvar vectorb2 = new SFVec3f (radius2, 0, -width * 0.5);",
                                      "",
                                      "\t// Generate front face indices",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar index = i * 3;",
                                      "",
                                      "\t\tindices [indices .length] = index;",
                                      "\t\tindices [indices .length] = index + 1;",
                                      "\t\tindices [indices .length] = index + 2;",
                                      "\t\tindices [indices .length] = index + 4;",
                                      "\t\tindices [indices .length] = index + 3;",
                                      "\t\tindices [indices .length] = -1;",
                                      "\t}",
                                      "",
                                      "\t// Generate front face points",
                                      "",
                                      "\tfor (var i = 0; i < teeth + 1; ++ i)",
                                      "\t{",
                                      "\t\tvar angle = i * 2 * Math .PI / teeth;",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle)          .multVec (vectorf0);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle)          .multVec (vectorf1);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 3 * da) .multVec (vectorf1);",
                                      "\t}",
                                      "",
                                      "\tpoints .length = points .length - 1;",
                                      "",
                                      "\tpoints [points .length] = new SFVec3f ();",
                                      "\tpoints [points .length] = new SFVec3f ();",
                                      "\tpoints [points .length] = new SFVec3f ();",
                                      "",
                                      "",
                                      "\t// Generate front sides of teeth indices",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar index = i * 4;",
                                      "",
                                      "\t\tindices [indices .length] = points .length + index;",
                                      "\t\tindices [indices .length] = points .length + index + 1;",
                                      "\t\tindices [indices .length] = points .length + index + 2;",
                                      "\t\tindices [indices .length] = points .length + index + 3;",
                                      "\t\tindices [indices .length] = -1;",
                                      "\t}",
                                      "",
                                      "\t// Generate front sides of teeth points",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar angle = i * 2 * Math .PI / teeth;",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle)          .multVec (vectorf1);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + da)     .multVec (vectorf2);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 2 * da) .multVec (vectorf2);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 3 * da) .multVec (vectorf1);",
                                      "\t}",
                                      "",
                                      "",
                                      "\t// Generate back face indices",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar index = i * 3;",
                                      "",
                                      "\t\tindices [indices .length] = points .length + index;",
                                      "\t\tindices [indices .length] = points .length + index + 3;",
                                      "\t\tindices [indices .length] = points .length + index + 4;",
                                      "\t\tindices [indices .length] = points .length + index + 2;",
                                      "\t\tindices [indices .length] = points .length + index + 1;",
                                      "\t\tindices [indices .length] = -1;",
                                      "\t}",
                                      "",
                                      "\t// Generate back face points",
                                      "",
                                      "\tfor (var i = 0; i < teeth + 1; ++ i)",
                                      "\t{",
                                      "\t\tvar angle = i * 2 * Math .PI / teeth;",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle)          .multVec (vectorb0);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle)          .multVec (vectorb1);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 3 * da) .multVec (vectorb1);",
                                      "\t}",
                                      "",
                                      "\tpoints .length = points .length - 1;",
                                      "",
                                      "",
                                      "\t// Generate back sides of teeth indices",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar index = i * 4;",
                                      "",
                                      "\t\tindices [indices .length] = points .length + index;",
                                      "\t\tindices [indices .length] = points .length + index + 1;",
                                      "\t\tindices [indices .length] = points .length + index + 2;",
                                      "\t\tindices [indices .length] = points .length + index + 3;",
                                      "\t\tindices [indices .length] = -1;",
                                      "\t}",
                                      "",
                                      "\t// Generate front sides of teeth points",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar angle = i * 2 * Math .PI / teeth;",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 3 * da) .multVec (vectorb1);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 2 * da) .multVec (vectorb2);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + da)     .multVec (vectorb2);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle)          .multVec (vectorb1);",
                                      "\t}",
                                      "",
                                      "",
                                      "\t// Generate outward faces of teeth indices",
                                      "",
                                      "\tfor (var i = 0; i < teeth * 4; ++ i)",
                                      "\t{",
                                      "\t\tvar index = i * 2;",
                                      "",
                                      "\t\tindices [indices .length] = points .length + index;",
                                      "\t\tindices [indices .length] = points .length + index + 1;",
                                      "\t\tindices [indices .length] = points .length + index + 3;",
                                      "\t\tindices [indices .length] = points .length + index + 2;",
                                      "\t\tindices [indices .length] = -1;",
                                      "\t}",
                                      "",
                                      "\tindices [indices .length - 3] = points .length + 1;",
                                      "\tindices [indices .length - 2] = points .length;",
                                      "",
                                      "\t// Generate outward faces of teeth points",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t   var angle = i * 2 * Math .PI / teeth;",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle) .multVec (vectorf1);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle) .multVec (vectorb1);",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + da) .multVec (vectorf2);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + da) .multVec (vectorb2);",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 2 * da) .multVec (vectorf2);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 2 * da) .multVec (vectorb2);",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 3 * da) .multVec (vectorf1);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 3 * da) .multVec (vectorb1);",
                                      "\t}",
                                      "",
                                      "",
                                      "\t// Generate inside radius cylinder points",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar index = i * 2;",
                                      "",
                                      "\t\tindices [indices .length] = points .length + index;",
                                      "\t\tindices [indices .length] = points .length + index + 1;",
                                      "\t\tindices [indices .length] = points .length + index + 3;",
                                      "\t\tindices [indices .length] = points .length + index + 2;",
                                      "\t\tindices [indices .length] = -1;",
                                      "\t}",
                                      "",
                                      "\tindices [indices .length - 3] = points .length + 1;",
                                      "\tindices [indices .length - 2] = points .length;",
                                      "",
                                      "\t// Generate inside radius cylinder indices",
                                      "",
                                      "\tfor (var i = 0; i < teeth + 1; ++ i)",
                                      "\t{",
                                      "\t\tvar angle = i * 2 * Math .PI / teeth;",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle) .multVec (vectorb0);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle) .multVec (vectorf0);",
                                      "\t}",
                                      "",
                                      "\tprint ('### Generating gear done.');",
                                      "",
                                      "\tgear .coord .point   = points;",
                                      "\tgear .set_coordIndex = indices;",
                                      "}"
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "Transform": {
            "@DEF": "BlueGear_1",
            "@translation": [
              -2.68468,
              3.41658,
              2.89301
            ],
            "@rotation": [
              -0.0562884,
              0.982778,
              0.176007,
              3.65356
            ],
            "-children": [
              {
                "Transform": {
                  "@DEF": "Gear_3",
                  "-children": [
                    {
                      "Shape": {
                        "-appearance": {
                          "Appearance": {
                            "-material": {
                              "Material": {
                                "@diffuseColor": [
                                  0.2,
                                  0.2,
                                  1
                                ]
                              }
                            }
                          }
                        },
                        "-geometry": {
                          "IndexedFaceSet": {
                            "@DEF": "DECLGear_INSTANCE2000_Gear",
                            "-coord": {
                              "Coordinate": {}
                            }
                          }
                        }
                      }
                    },
                    {
                      "Switch": {
                        "@whichChoice": -1,
                        "-children": [
                          {
                            "Group": {
                              "-children": [
                                {
                                  "Script": {
                                    "@directOutput": true,
                                    "field": [
                                      {
                                        "@name": "teeth",
                                        "@accessType": "inputOutput",
                                        "@type": "SFFloat",
                                        "@value": 10
                                      },
                                      {
                                        "@name": "toothDepth",
                                        "@accessType": "inputOutput",
                                        "@type": "SFFloat",
                                        "@value": 0.7
                                      },
                                      {
                                        "@name": "innerRadius",
                                        "@accessType": "inputOutput",
                                        "@type": "SFFloat",
                                        "@value": 1.3
                                      },
                                      {
                                        "@name": "outerRadius",
                                        "@accessType": "inputOutput",
                                        "@type": "SFFloat",
                                        "@value": 2
                                      },
                                      {
                                        "@name": "width",
                                        "@accessType": "inputOutput",
                                        "@type": "SFFloat",
                                        "@value": 0.5
                                      },
                                      {
                                        "@name": "gear",
                                        "@accessType": "initializeOnly",
                                        "@type": "SFNode",
                                        "-children": [
                                          {
                                            "IndexedFaceSet": {
                                              "@USE": "DECLGear_INSTANCE2000_Gear"
                                            }
                                          }
                                        ]
                                      }
                                    ],
                                    "#sourceText": [
                                      "vrmlscript:",
                                      "",
                                      "function initialize ()",
                                      "{",
                                      "\teventsProcessed ();",
                                      "}",
                                      "",
                                      "function eventsProcessed ()",
                                      "{",
                                      "\tprint ('### Generating gear ...');",
                                      "",
                                      "\tvar indices = new MFInt32 ();",
                                      "\tvar points  = new MFVec3f ();",
                                      "",
                                      "\tvar cos = Math .cos;",
                                      "\tvar sin = Math .sin;",
                                      "",
                                      "\t// Radien and tooth angle",
                                      "",
                                      "\tvar radius0 = innerRadius;",
                                      "\tvar radius1 = outerRadius - toothDepth / 2;",
                                      "\tvar radius2 = outerRadius + toothDepth / 2;",
                                      "\tvar da = 2 * Math .PI / teeth / 4;",
                                      "",
                                      "\t// Front vectors",
                                      "",
                                      "\tvar vectorf0 = new SFVec3f (radius0, 0, width * 0.5);",
                                      "\tvar vectorf1 = new SFVec3f (radius1, 0, width * 0.5);",
                                      "\tvar vectorf2 = new SFVec3f (radius2, 0, width * 0.5);",
                                      "",
                                      "\t// Back vectors",
                                      "",
                                      "\tvar vectorb0 = new SFVec3f (radius0, 0, -width * 0.5);",
                                      "\tvar vectorb1 = new SFVec3f (radius1, 0, -width * 0.5);",
                                      "\tvar vectorb2 = new SFVec3f (radius2, 0, -width * 0.5);",
                                      "",
                                      "\t// Generate front face indices",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar index = i * 3;",
                                      "",
                                      "\t\tindices [indices .length] = index;",
                                      "\t\tindices [indices .length] = index + 1;",
                                      "\t\tindices [indices .length] = index + 2;",
                                      "\t\tindices [indices .length] = index + 4;",
                                      "\t\tindices [indices .length] = index + 3;",
                                      "\t\tindices [indices .length] = -1;",
                                      "\t}",
                                      "",
                                      "\t// Generate front face points",
                                      "",
                                      "\tfor (var i = 0; i < teeth + 1; ++ i)",
                                      "\t{",
                                      "\t\tvar angle = i * 2 * Math .PI / teeth;",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle)          .multVec (vectorf0);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle)          .multVec (vectorf1);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 3 * da) .multVec (vectorf1);",
                                      "\t}",
                                      "",
                                      "\tpoints .length = points .length - 1;",
                                      "",
                                      "\tpoints [points .length] = new SFVec3f ();",
                                      "\tpoints [points .length] = new SFVec3f ();",
                                      "\tpoints [points .length] = new SFVec3f ();",
                                      "",
                                      "",
                                      "\t// Generate front sides of teeth indices",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar index = i * 4;",
                                      "",
                                      "\t\tindices [indices .length] = points .length + index;",
                                      "\t\tindices [indices .length] = points .length + index + 1;",
                                      "\t\tindices [indices .length] = points .length + index + 2;",
                                      "\t\tindices [indices .length] = points .length + index + 3;",
                                      "\t\tindices [indices .length] = -1;",
                                      "\t}",
                                      "",
                                      "\t// Generate front sides of teeth points",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar angle = i * 2 * Math .PI / teeth;",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle)          .multVec (vectorf1);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + da)     .multVec (vectorf2);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 2 * da) .multVec (vectorf2);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 3 * da) .multVec (vectorf1);",
                                      "\t}",
                                      "",
                                      "",
                                      "\t// Generate back face indices",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar index = i * 3;",
                                      "",
                                      "\t\tindices [indices .length] = points .length + index;",
                                      "\t\tindices [indices .length] = points .length + index + 3;",
                                      "\t\tindices [indices .length] = points .length + index + 4;",
                                      "\t\tindices [indices .length] = points .length + index + 2;",
                                      "\t\tindices [indices .length] = points .length + index + 1;",
                                      "\t\tindices [indices .length] = -1;",
                                      "\t}",
                                      "",
                                      "\t// Generate back face points",
                                      "",
                                      "\tfor (var i = 0; i < teeth + 1; ++ i)",
                                      "\t{",
                                      "\t\tvar angle = i * 2 * Math .PI / teeth;",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle)          .multVec (vectorb0);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle)          .multVec (vectorb1);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 3 * da) .multVec (vectorb1);",
                                      "\t}",
                                      "",
                                      "\tpoints .length = points .length - 1;",
                                      "",
                                      "",
                                      "\t// Generate back sides of teeth indices",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar index = i * 4;",
                                      "",
                                      "\t\tindices [indices .length] = points .length + index;",
                                      "\t\tindices [indices .length] = points .length + index + 1;",
                                      "\t\tindices [indices .length] = points .length + index + 2;",
                                      "\t\tindices [indices .length] = points .length + index + 3;",
                                      "\t\tindices [indices .length] = -1;",
                                      "\t}",
                                      "",
                                      "\t// Generate front sides of teeth points",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar angle = i * 2 * Math .PI / teeth;",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 3 * da) .multVec (vectorb1);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 2 * da) .multVec (vectorb2);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + da)     .multVec (vectorb2);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle)          .multVec (vectorb1);",
                                      "\t}",
                                      "",
                                      "",
                                      "\t// Generate outward faces of teeth indices",
                                      "",
                                      "\tfor (var i = 0; i < teeth * 4; ++ i)",
                                      "\t{",
                                      "\t\tvar index = i * 2;",
                                      "",
                                      "\t\tindices [indices .length] = points .length + index;",
                                      "\t\tindices [indices .length] = points .length + index + 1;",
                                      "\t\tindices [indices .length] = points .length + index + 3;",
                                      "\t\tindices [indices .length] = points .length + index + 2;",
                                      "\t\tindices [indices .length] = -1;",
                                      "\t}",
                                      "",
                                      "\tindices [indices .length - 3] = points .length + 1;",
                                      "\tindices [indices .length - 2] = points .length;",
                                      "",
                                      "\t// Generate outward faces of teeth points",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t   var angle = i * 2 * Math .PI / teeth;",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle) .multVec (vectorf1);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle) .multVec (vectorb1);",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + da) .multVec (vectorf2);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + da) .multVec (vectorb2);",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 2 * da) .multVec (vectorf2);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 2 * da) .multVec (vectorb2);",
                                      "",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 3 * da) .multVec (vectorf1);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle + 3 * da) .multVec (vectorb1);",
                                      "\t}",
                                      "",
                                      "",
                                      "\t// Generate inside radius cylinder points",
                                      "",
                                      "\tfor (var i = 0; i < teeth; ++ i)",
                                      "\t{",
                                      "\t\tvar index = i * 2;",
                                      "",
                                      "\t\tindices [indices .length] = points .length + index;",
                                      "\t\tindices [indices .length] = points .length + index + 1;",
                                      "\t\tindices [indices .length] = points .length + index + 3;",
                                      "\t\tindices [indices .length] = points .length + index + 2;",
                                      "\t\tindices [indices .length] = -1;",
                                      "\t}",
                                      "",
                                      "\tindices [indices .length - 3] = points .length + 1;",
                                      "\tindices [indices .length - 2] = points .length;",
                                      "",
                                      "\t// Generate inside radius cylinder indices",
                                      "",
                                      "\tfor (var i = 0; i < teeth + 1; ++ i)",
                                      "\t{",
                                      "\t\tvar angle = i * 2 * Math .PI / teeth;",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle) .multVec (vectorb0);",
                                      "\t\tpoints [points .length] = new SFRotation (0, 0, 1, angle) .multVec (vectorf0);",
                                      "\t}",
                                      "",
                                      "\tprint ('### Generating gear done.');",
                                      "",
                                      "\tgear .coord .point   = points;",
                                      "\tgear .set_coordIndex = indices;",
                                      "}"
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLRotor_RedRotor_Interpolator",
            "@fromField": "value_changed",
            "@toNode": "Gear_1",
            "@toField": "set_rotation"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLRotor_GreenRotor_Interpolator",
            "@fromField": "value_changed",
            "@toNode": "Gear_2",
            "@toField": "set_rotation"
          }
        },
        {
          "ROUTE": {
            "@fromNode": "DECLRotor_BlueRotor_Interpolator",
            "@fromField": "value_changed",
            "@toNode": "Gear_3",
            "@toField": "set_rotation"
          }
        }
      ]
    }
  }
}
