{
  "X3D": {
    "@xmlns:xsd": "http://www.w3.org/2001/XMLSchema-instance",
    "@profile": "Immersive",
    "@version": "3.3",
    "@xsd:noNamespaceSchemaLocation": "http://www.web3d.org/specifications/x3d-3.3.xsd",
    "head": {
      "component": [
        {
          "@name": "Navigation",
          "@level": 3
        },
        {
          "@name": "Layering",
          "@level": 1
        }
      ],
      "unit": [
        {
          "@name": "AngleUnitConversion",
          "@category": "angle",
          "@conversionFactor": 1
        },
        {
          "@name": "LengthUnitConversion",
          "@category": "length",
          "@conversionFactor": 1
        }
      ],
      "meta": [
        {
          "@name": "title",
          "@content": "HelloWorldProgramOutput.x3d"
        },
        {
          "@name": "description",
          "@content": "Example HelloWorldProgram creates an X3D model using the X3D Java Scene Access Interface (SAI) Library"
        },
        {
          "@name": "reference",
          "@content": "http://www.web3d.org/specifications/java/X3DJSAIL.html"
        },
        {
          "@name": "generator",
          "@content": "HelloWorldProgramOutput.java"
        },
        {
          "@name": "created",
          "@content": "6 September 2016"
        },
        {
          "@name": "modified",
          "@content": "11 December 2017"
        },
        {
          "@name": "generator",
          "@content": "X3D Java Scene Access Interface Library (X3DJSAIL)"
        },
        {
          "@name": "generator",
          "@content": "http://www.web3d.org/specifications/java/examples/HelloWorldProgram.java"
        },
        {
          "@name": "generator",
          "@content": "Netbeans http://www.netbeans.org"
        },
        {
          "@name": "creator",
          "@content": "Don Brutzman"
        },
        {
          "@name": "reference",
          "@content": "https://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/stylesheets/java/examples/HelloWorldProgramOutput.x3d"
        },
        {
          "@name": "reference",
          "@content": "Console output, ClassicVRML encoding, VRML97 encoding and pretty-print documentation:"
        },
        {
          "@name": "reference",
          "@content": "HelloWorldProgramOutput.txt"
        },
        {
          "@name": "reference",
          "@content": "HelloWorldProgramOutput.x3dv"
        },
        {
          "@name": "reference",
          "@content": "HelloWorldProgramOutput.wrl"
        },
        {
          "@name": "reference",
          "@content": "HelloWorldProgramOutput.html"
        },
        {
          "@name": "X3dValidator",
          "@content": "https://savage.nps.edu/X3dValidator?url=http://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d"
        },
        {
          "@name": "identifier",
          "@content": "http://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d"
        },
        {
          "@name": "license",
          "@content": "../license.html"
        },
        {
          "@name": "SpecialTest",
          "@content": "tested sat: name value cannot contain embedded space character"
        }
      ],
      "#comment": "comment #4"
    },
    "Scene": {
      "-children": [
        {
          "ViewpointGroup": {
            "@description": "Available viewpoints",
            "-children": [
              {
                "Viewpoint": {
                  "@DEF": "DefaultView",
                  "@description": "Hello X3DJSAIL"
                }
              },
              {
                "Viewpoint": {
                  "@DEF": "TopDownView",
                  "@description": "top-down view from above",
                  "@orientation": [
                    1,
                    0,
                    0,
                    -1.570796
                  ],
                  "@position": [
                    0,
                    100,
                    0
                  ]
                }
              }
            ]
          }
        },
        {
          "WorldInfo": {
            "@DEF": "WorldInfoDEF",
            "@title": "HelloWorldProgram produced by X3D Java SAI Library (X3DJSAIL)"
          }
        },
        {
          "WorldInfo": {
            "@USE": "WorldInfoDEF"
          }
        },
        {
          "WorldInfo": {
            "@USE": "WorldInfoDEF"
          }
        },
        {
          "LayerSet": {
            "@DEF": "scene.addChildLayerSetObjectTest"
          }
        },
        {
          "Transform": {
            "@DEF": "LogoGeometryTransform",
            "@translation": [
              0,
              1.5,
              0
            ],
            "-children": [
              {
                "Anchor": {
                  "@description": "select for X3D Java SAI Library (X3DJSAIL) description",
                  "@url": [
                    "../X3DJSAIL.html",
                    "http://www.web3d.org/specifications/java/X3DJSAIL.html"
                  ],
                  "-children": [
                    {
                      "Shape": {
                        "@DEF": "BoxShape",
                        "-appearance": [
                          {
                            "Appearance": {
                              "@containerField": "appearance",
                              "-material": [
                                {
                                  "Material": {
                                    "@containerField": "material",
                                    "@DEF": "GreenMaterial",
                                    "@diffuseColor": [
                                      0,
                                      1,
                                      1
                                    ],
                                    "@emissiveColor": [
                                      0,
                                      0,
                                      0
                                    ],
                                    "@transparency": 0.1
                                  }
                                }
                              ],
                              "-texture": [
                                {
                                  "ImageTexture": {
                                    "@containerField": "texture",
                                    "@url": [
                                      "images/X3dJavaSceneAccessInterfaceSaiLibrary.png",
                                      "http://www.web3d.org/specifications/java/examples/images/X3dJavaSceneAccessInterfaceSaiLibrary.png"
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "-geometry": [
                          {
                            "Box": {
                              "@containerField": "geometry",
                              "@DEF": "test-NMTOKEN_regex.0123456789",
                              "@class": "textured"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "Shape": {
            "@DEF": "LineShape",
            "-appearance": [
              {
                "Appearance": {
                  "@containerField": "appearance",
                  "-material": [
                    {
                      "Material": {
                        "@containerField": "material",
                        "@emissiveColor": [
                          0,
                          0,
                          0
                        ]
                      }
                    }
                  ]
                }
              }
            ],
            "-geometry": [
              {
                "IndexedLineSet": {
                  "@containerField": "geometry",
                  "@coordIndex": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    0
                  ],
                  "-coord": [
                    {
                      "Coordinate": {
                        "@containerField": "coord",
                        "@point": [
                          0,
                          1.5,
                          0,
                          2,
                          1.5,
                          0,
                          2,
                          1.5,
                          -2,
                          -2,
                          1.5,
                          -2,
                          -2,
                          1.5,
                          0,
                          0,
                          1.5,
                          0
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "PositionInterpolator": {
            "@DEF": "BoxPathAnimator",
            "@key": [
              0,
              0.125,
              0.375,
              0.625,
              0.875,
              1
            ],
            "@keyValue": [
              0,
              1.5,
              0,
              2,
              1.5,
              0,
              2,
              1.5,
              -2,
              -2,
              1.5,
              -2,
              -2,
              1.5,
              0,
              0,
              1.5,
              0
            ]
          }
        },
        {
          "TimeSensor": {
            "@DEF": "OrbitClock",
            "@cycleInterval": 8,
            "@loop": true
          }
        },
        {
          "Transform": {
            "@DEF": "TextTransform",
            "@translation": [
              0,
              -1.5,
              0
            ],
            "-children": [
              {
                "Shape": {
                  "-appearance": [
                    {
                      "Appearance": {
                        "@containerField": "appearance",
                        "-material": [
                          {
                            "Material": {
                              "@containerField": "material",
                              "@USE": "GreenMaterial"
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "-geometry": [
                    {
                      "Text": {
                        "@containerField": "geometry",
                        "@string": [
                          "X3D Java",
                          "SAI Library",
                          "X3DJSAIL"
                        ],
                        "-metadata": [
                          {
                            "MetadataSet": {
                              "@containerField": "metadata",
                              "@name": "EscapedQuotationMarksMetadataSet",
                              "-metadata": [
                                {
                                  "MetadataString": {
                                    "@containerField": "metadata",
                                    "@name": "escapedQuotesTest2",
                                    "@value": [
                                      "escaped quotation marks example 2: He said, &amp;quot;Immel did it!&amp;quot;"
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "-fontStyle": [
                          {
                            "FontStyle": {
                              "@containerField": "fontStyle",
                              "@justify": [
                                "MIDDLE",
                                "MIDDLE"
                              ]
                            }
                          }
                        ],
                        "#comment": "escaped quotation marks example 4: He said, &quot;Immel did it!&quot;"
                      }
                    }
                  ]
                }
              },
              {
                "Collision": {
                  "#comment": "test containerField='proxy'",
                  "-children": [
                    {
                      "Shape": {
                        "@DEF": "ProxyShape",
                        "-geometry": [
                          {
                            "Text": {
                              "@containerField": "geometry",
                              "@string": [
                                "One, Two, Three",
                                "",
                                "He said, \\\"Immel did it!\\\""
                              ]
                            }
                          }
                        ],
                        "#comment": "reference: http://www.web3d.org/x3d/content/examples/Basic/X3dSpecifications/StringArrayEncodingExamplesIndex.html"
                      }
                    }
                  ]
                }
              }
            ],
            "#comment": "https://en.wikipedia.org/wiki/Beautiful_World_(Devo_song)"
          }
        },
        {
          "OrientationInterpolator": {
            "@DEF": "SpinInterpolator",
            "@key": [
              0,
              0.5,
              1
            ],
            "@keyValue": [
              0,
              1,
              0,
              4.712389,
              0,
              1,
              0,
              0,
              0,
              1,
              0,
              1.5707964
            ]
          }
        },
        {
          "TimeSensor": {
            "@DEF": "SpinClock",
            "@cycleInterval": 5,
            "@loop": true
          }
        },
        {
          "Group": {
            "@DEF": "BackgroundGroup",
            "-children": [
              {
                "Background": {
                  "@DEF": "GradualBackground"
                }
              },
              {
                "Script": {
                  "@DEF": "colorTypeConversionScript",
                  "field": [
                    {
                      "@name": "colorInput",
                      "@accessType": "inputOnly",
                      "@type": "SFColor"
                    },
                    {
                      "@name": "colorsOutput",
                      "@accessType": "outputOnly",
                      "@type": "MFColor"
                    }
                  ],
                  "#sourceText": [
                    "ecmascript:",
                    "",
                    "function colorInput (eventValue) // Example source code",
                    "{",
                    "   colorsOutput = new MFColor(eventValue); // assigning value sends output event",
                    "// Browser.print('colorInput=' + eventValue + ', colorsOutput=' + colorsOutput + '\\\\n');",
                    "}",
                    ""
                  ]
                }
              },
              {
                "ColorInterpolator": {
                  "@DEF": "ColorAnimator",
                  "@key": [
                    0,
                    0.5,
                    1
                  ],
                  "@keyValue": [
                    0,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1
                  ],
                  "#comment": "AZURE to INDIGO and back again"
                }
              },
              {
                "TimeSensor": {
                  "@DEF": "ColorClock",
                  "@cycleInterval": 60,
                  "@loop": true
                }
              }
            ],
            "ROUTE": [
              {
                "@fromField": "colorsOutput",
                "@fromNode": "colorTypeConversionScript",
                "@toField": "skyColor",
                "@toNode": "GradualBackground"
              },
              {
                "@fromField": "value_changed",
                "@fromNode": "ColorAnimator",
                "@toField": "colorInput",
                "@toNode": "colorTypeConversionScript"
              },
              {
                "@fromField": "fraction_changed",
                "@fromNode": "ColorClock",
                "@toField": "set_fraction",
                "@toNode": "ColorAnimator"
              }
            ]
          }
        },
        {
          "ProtoDeclare": {
            "@name": "ArtDeco01Material",
            "@appinfo": "tooltip: ArtDeco01Material prototype is a Material node",
            "-children": [
              {
                "ProtoInterface": {
                  "field": [
                    {
                      "@name": "description",
                      "@accessType": "inputOutput",
                      "@appinfo": "tooltip for descriptionField",
                      "@type": "SFString",
                      "@value": "ArtDeco01Material prototype is a Material node"
                    },
                    {
                      "@name": "enabled",
                      "@accessType": "inputOutput",
                      "@type": "SFBool",
                      "@value": "true"
                    }
                  ]
                }
              },
              {
                "ProtoBody": {
                  "#comment": "presence of follow-on TouchSensor shows that additional nodes are allowed in ProtoBody after initial node, regardless of node types",
                  "-children": [
                    {
                      "Material": {
                        "@ambientIntensity": 0.25,
                        "@diffuseColor": [
                          0,
                          0,
                          0
                        ],
                        "@shininess": 0.127273,
                        "@specularColor": [
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "TouchSensor": {
                        "@description": "within ProtoBody",
                        "-children": [
                          {
                            "IS": {
                              "connect": [
                                {
                                  "@nodeField": "description",
                                  "@protoField": "description"
                                },
                                {
                                  "@nodeField": "enabled",
                                  "@protoField": "enabled"
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "ExternProtoDeclare": {
            "@name": "ArtDeco02Material",
            "@appinfo": "this is a different Material node",
            "@url": [
              "http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3d#ArtDeco02Material",
              "http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3dv#ArtDeco02Material"
            ],
            "field": [
              {
                "@name": "description",
                "@accessType": "inputOutput",
                "@appinfo": "tooltip for descriptionField",
                "@type": "SFString"
              }
            ],
            "#comment": "[HelloWorldProgram diagnostic] ArtDeco02ExternProtoDeclare.getNodeType()=\\\"ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE: ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run time, TODO X3DJSAIL needs to add further capability.\\\""
          }
        },
        {
          "Shape": {
            "@DEF": "TestShape1",
            "-appearance": [
              {
                "Appearance": {
                  "@containerField": "appearance",
                  "@DEF": "TestAppearance1",
                  "-children": [
                    {
                      "ProtoInstance": {
                        "@name": "ArtDeco01Material",
                        "fieldValue": [
                          {
                            "@name": "description",
                            "@value": "ArtDeco01Material can substitute for a Material node"
                          }
                        ],
                        "#comment": "[HelloWorldProgram diagnostic] ArtDeco01ProtoInstance.getNodeType()=\\\"Material\\\""
                      }
                    }
                  ],
                  "#comment": "ArtDeco01Material prototype goes here..."
                }
              }
            ],
            "-geometry": [
              {
                "Sphere": {
                  "@containerField": "geometry",
                  "@radius": 0.001
                }
              }
            ]
          }
        },
        {
          "Shape": {
            "@DEF": "TestShape2",
            "-appearance": [
              {
                "Appearance": {
                  "@containerField": "appearance",
                  "@DEF": "TestAppearance2",
                  "-children": [
                    {
                      "ProtoInstance": {
                        "@name": "ArtDeco02Material",
                        "fieldValue": [
                          {
                            "@name": "description",
                            "@value": "ArtDeco02Material can substitute for another Material node"
                          }
                        ],
                        "#comment": "[HelloWorldProgram diagnostic] ArtDeco02ProtoInstance.getNodeType()=\\\"ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE: ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run time, TODO X3DJSAIL needs to add further capability.\\\""
                      }
                    }
                  ],
                  "#comment": "ArtDeco02Material prototype goes here..."
                }
              }
            ],
            "-geometry": [
              {
                "Cone": {
                  "@containerField": "geometry",
                  "@bottomRadius": 0.001,
                  "@height": 0.001
                }
              }
            ]
          }
        },
        {
          "Inline": {
            "@DEF": "inlineSceneDef",
            "@url": [
              "someOtherScene.x3d"
            ]
          }
        },
        {
          "IMPORT": {
            "@AS": "WorldInfoDEF2",
            "@importedDEF": "WorldInfoDEF",
            "@inlineDEF": "inlineSceneDef"
          }
        },
        {
          "EXPORT": {
            "@AS": "WorldInfoDEF3",
            "@localDEF": "WorldInfoDEF"
          }
        },
        {
          "ProtoDeclare": {
            "@name": "MaterialModulator",
            "@appinfo": "mimic a Material node and modulate fields as an animation effect",
            "@documentation": "http://x3dgraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/MaterialModulatorIndex.html",
            "-children": [
              {
                "ProtoInterface": {
                  "field": [
                    {
                      "@name": "enabled",
                      "@accessType": "inputOutput",
                      "@type": "SFBool",
                      "@value": "true"
                    },
                    {
                      "@name": "diffuseColor",
                      "@accessType": "inputOutput",
                      "@type": "SFColor",
                      "@value": "0 0 0"
                    },
                    {
                      "@name": "emissiveColor",
                      "@accessType": "inputOutput",
                      "@type": "SFColor",
                      "@value": "0.05 0.05 0.5"
                    },
                    {
                      "@name": "specularColor",
                      "@accessType": "inputOutput",
                      "@type": "SFColor",
                      "@value": "0 0 0"
                    },
                    {
                      "@name": "transparency",
                      "@accessType": "inputOutput",
                      "@type": "SFFloat",
                      "@value": "0"
                    },
                    {
                      "@name": "shininess",
                      "@accessType": "inputOutput",
                      "@type": "SFFloat",
                      "@value": "0"
                    },
                    {
                      "@name": "ambientIntensity",
                      "@accessType": "inputOutput",
                      "@type": "SFFloat",
                      "@value": "0"
                    }
                  ]
                }
              },
              {
                "ProtoBody": {
                  "-children": [
                    {
                      "Material": {
                        "@DEF": "MaterialNode",
                        "-children": [
                          {
                            "IS": {
                              "connect": [
                                {
                                  "@nodeField": "diffuseColor",
                                  "@protoField": "diffuseColor"
                                },
                                {
                                  "@nodeField": "emissiveColor",
                                  "@protoField": "emissiveColor"
                                },
                                {
                                  "@nodeField": "specularColor",
                                  "@protoField": "specularColor"
                                },
                                {
                                  "@nodeField": "transparency",
                                  "@protoField": "transparency"
                                },
                                {
                                  "@nodeField": "shininess",
                                  "@protoField": "shininess"
                                },
                                {
                                  "@nodeField": "ambientIntensity",
                                  "@protoField": "ambientIntensity"
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "Script": {
                        "@DEF": "MaterialModulatorScript",
                        "field": [
                          {
                            "@name": "enabled",
                            "@accessType": "inputOutput",
                            "@type": "SFBool"
                          },
                          {
                            "@name": "diffuseColor",
                            "@accessType": "inputOutput",
                            "@type": "SFColor"
                          },
                          {
                            "@name": "newColor",
                            "@accessType": "outputOnly",
                            "@type": "SFColor"
                          },
                          {
                            "@name": "clockTrigger",
                            "@accessType": "inputOnly",
                            "@type": "SFTime"
                          }
                        ],
                        "-children": [
                          {
                            "IS": {
                              "connect": [
                                {
                                  "@nodeField": "enabled",
                                  "@protoField": "enabled"
                                },
                                {
                                  "@nodeField": "diffuseColor",
                                  "@protoField": "diffuseColor"
                                }
                              ]
                            }
                          }
                        ],
                        "#sourceText": [
                          "ecmascript:",
                          "function initialize ()",
                          "{",
                          "    newColor = diffuseColor; // start with correct color",
                          "}",
                          "function set_enabled (newValue)",
                          "{",
                          "\tenabled = newValue;",
                          "}",
                          "function clockTrigger (timeValue)",
                          "{",
                          "    if (!enabled) return;",
                          "    red   = newColor.r;",
                          "    green = newColor.g;",
                          "    blue  = newColor.b;",
                          "    ",
                          "    // note different modulation rates for each color component, % is modulus operator",
                          "    newColor = new SFColor ((red + 0.02) % 1, (green + 0.03) % 1, (blue + 0.04) % 1);",
                          "\tif (enabled)",
                          "\t{",
                          "\t\tBrowser.print ('diffuseColor=(' + red + ',' + green + ',' + blue + ') newColor=' + newColor.toString() + '\\\\n');",
                          "\t}",
                          "}",
                          ""
                        ]
                      }
                    }
                  ],
                  "#comment": "Only first node (the node type) is renderable, others are along for the ride"
                }
              }
            ]
          }
        },
        {
          "Group": {
            "@DEF": "DeclarativeGroupExample",
            "-children": [
              {
                "Shape": {
                  "-metadata": [
                    {
                      "MetadataString": {
                        "@containerField": "metadata",
                        "@name": "findThisNameValue",
                        "@DEF": "FindableMetadataStringTest",
                        "@value": [
                          "test case"
                        ]
                      }
                    }
                  ],
                  "-appearance": [
                    {
                      "Appearance": {
                        "@containerField": "appearance",
                        "@DEF": "DeclarativeAppearanceExample",
                        "-children": [
                          {
                            "ProtoInstance": {
                              "@name": "MaterialModulator",
                              "@DEF": "MyMaterialModulator"
                            }
                          }
                        ],
                        "#comment": "DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator ProtoInstance"
                      }
                    }
                  ],
                  "-geometry": [
                    {
                      "Cone": {
                        "@containerField": "geometry",
                        "@bottom": true,
                        "@bottomRadius": 0.05,
                        "@height": 0.1
                      }
                    }
                  ]
                }
              }
            ],
            "#comment": "Test success: declarativeGroup.addChild() singleton pipeline method"
          }
        },
        {
          "Group": {
            "@DEF": "TestFieldObjectsGroup",
            "#comment": "SFVec3f default=0 0 0, initial=1 2 3, setValue=4 5 6, multiply(2)=8 10 12, normalize()=0.45584232 0.5698029 0.68376344"
          }
        },
        {
          "Sound": {
            "@location": [
              0,
              1.6,
              0
            ],
            "-source": [
              {
                "AudioClip": {
                  "@containerField": "source",
                  "@description": "chimes",
                  "@url": [
                    "chimes.wav",
                    "http://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/chimes.wav"
                  ],
                  "#comment": "Scene example fragment from http://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/default.x3d"
                }
              }
            ],
            "#comment": "set sound-ellipsoid location height at 1.6m to match typical avatar height"
          }
        },
        {
          "Sound": {
            "@location": [
              0,
              1.6,
              0
            ],
            "-source": [
              {
                "MovieTexture": {
                  "@containerField": "source",
                  "@description": "mpgsys.mpg from ConformanceNist suite",
                  "@url": [
                    "mpgsys.mpg",
                    "http://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpgsys.mpg"
                  ],
                  "#comment": "Expected containerField='source', allowed containerField values=\\\"texture\\\" \\\"source\\\" \\\"back\\\" \\\"bottom\\\" \\\"front\\\" \\\"left\\\" \\\"right\\\" \\\"top\\\" \\\"backTexture\\\" \\\"bottomTexture\\\" \\\"frontTexture\\\" \\\"leftTexture\\\" \\\"rightTexture\\\" \\\"topTexture\\\""
                }
              }
            ],
            "#comment": "set sound-ellipsoid location height at 1.6m to match typical avatar height"
          }
        },
        {
          "Shape": {
            "@DEF": "ExtrusionShape",
            "-appearance": [
              {
                "Appearance": {
                  "@containerField": "appearance",
                  "@DEF": "TransparentAppearance",
                  "-material": [
                    {
                      "Material": {
                        "@containerField": "material",
                        "@transparency": 1
                      }
                    }
                  ]
                }
              }
            ],
            "-geometry": [
              {
                "Extrusion": {
                  "@containerField": "geometry",
                  "@DEF": "ExampleExtrusion"
                }
              }
            ],
            "#comment": "ExampleExtrusion isSpineClosed()=false, spine='[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]'"
          }
        }
      ],
      "ROUTE": [
        {
          "@fromField": "fraction_changed",
          "@fromNode": "OrbitClock",
          "@toField": "set_fraction",
          "@toNode": "BoxPathAnimator"
        },
        {
          "@fromField": "value_changed",
          "@fromNode": "BoxPathAnimator",
          "@toField": "set_translation",
          "@toNode": "LogoGeometryTransform"
        },
        {
          "@fromField": "fraction_changed",
          "@fromNode": "SpinClock",
          "@toField": "set_fraction",
          "@toNode": "SpinInterpolator"
        },
        {
          "@fromField": "value_changed",
          "@fromNode": "SpinInterpolator",
          "@toField": "rotation",
          "@toNode": "TextTransform"
        }
      ],
      "#comment": "Test success: CommentsBlock.isStatement()=false, testComments.isStatement()=false"
    }
  }
}